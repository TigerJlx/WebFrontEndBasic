
/*
开始完整网页的准备工作：
1、拿到效果图，分析结构做到心中有数，分成哪几个具体的部分（logo、导航、最新公告、商品列表......）
2、建立项目代码结构（css、js、images文件夹和html文件）
    给文件命名时最好不要出现汉字
    首页的网页命名为index.html，内容页再分别命名为content1.html、content2.html......
3、开始写css样式初始化（常见块级元素初始化、常见行内元素初始化、常见行内块元素初始化和清除浮动等等），文件一般命名为base.css或global.css
    其中块级元素的初始化不用带上div,行内元素的初始化不用带上span，这两个用于布局的标签很干净，内外边距等样式值默认都为0
    注意其中比较特殊的行内块元素，它的vertical-align属性默认是baseline，可能会导致它的系统元素的布局对齐出现异常。所以一般初始就赋值为middle
    一般网页都有版心，所以初始化会给一个版心样式（class=w）
具体内容见<base.css>
4、head标签中引入base.css，主页中再引入index.css，其它内容网页对应添加content-x.css
5、开始写网页，将网页分成的各个部分一个一个写，写完一个再写另一个。对一个部分，先写好结构html再对应写css样式，调好后再开始下一个部分
    在html或css代码中对每一个部分做好注释，使代码清晰简洁
注：
    1、代码编写过程中命名和注释是很重要的，要重视，养成好的规范习惯
    2、一个html文件或css文件中，不同的布局分块，独立些并分块做好注释，
    这样就把复杂的东西分成一个个简单的东西了，这样结构也清晰还不会乱，对一个复杂的大项目来说，结构分的越细越好，避免杂乱
    3、不同内容content.html都对应建立自己的content.css。base.css为首页和其它内容页共有
    4、样式书写过程中，类名、id名等最好直接复制粘贴以免出错
*/

0、学好CSS的关键
1）元素分类
块级元素（div等）、行内元素（a、span等）和行内块元素（input、img等）
//清楚各自的特点，必须时刻牢记于心!
块级元素：  换行显示；可以设置宽高；  弹性继承父元素宽度（如果父元素是块级元素的话），高度不设置时由子元素撑开
行内元素：  同行显示；不可以设置宽高；宽高均由子元素撑开
行内块元素：同行显示；可以设置宽高；  宽高不设置时由子元素撑开；
            垂直对齐vertical-align的问题（默认为baseline，使用display:inline-blcok;转换成行内块元素时要考虑一下这个问题）
注：行内或行内块元素代码编写受换行和空格影响(使用浮动来清除这个问题)

特别注意：
a、不要说行内块元素既具有块级元素的特点，又具有行内元素的特点，这种说法不对。这三个就是三个不同的东西，各自有各自的特点；
b、不要形成思维定势了。
    比如：看见div就认为它是块级元素。但是他有可能使用display转换成行内元素或行内块元素了，也有可能使用浮动或定位变成行内块元素了

2）元素布局三大工具
盒子模型（用于位置布局）、浮动（子元素水平排列）和定位（盒子压盒子）
//清楚各自的使用场景
注：浮动、绝对定位、相对定位固定定位的元素将不再是标准流了，而且会变成行内块元素(相对定位很特殊，不是标准流，但是却占着标准流层位置)
所以，之前会有弹性继承的块级元素，的默认宽高都为0了，由子元素撑开
//特别注意这一点，使用浮动和定位时就得意识到这一点。
//一定要注意，css是设置元素标签的，首先你得了解这个元素的特点，明确这个元素属于块级元素、行内元素还是行内块元素,并将它们的特点牢记于心。
注意事项之清除浮动：
场景：父元素div未设置宽高度（默认为0），由子元素撑开宽高度
      div里面所有元素设置为浮动之后，脱离标准流后不占位，父元素的宽高度又变成0【定位也是一样，但是定位时还有标准流的兄弟元素占位撑着呢，定位元素压在上面】
为了保证子元素还在父元素内的占位效果，设置清除浮动可以实现！

3）css的特点：优先级、权重和层叠性
//选择器选中了元素配置的样式，生不生效得看这个

1、width和height的百分比值，是相对于父元素
所以得保证父元素有值，块级元素会弹性继承于父级元素的宽度，但不会继承高度，默认值为0
注意下面这种情况
html,body{
    height: 100%;
}
//html,body要一起
.box{
    width: 100%;
    height: 100%;  /*使用百分比，基准是父元素，所以要设置父元素的宽高度，宽度会弹性继承（如果父元素是块级元素的话）*/
    position: relative;
    overflow: hidden;
}

2、盒子居中一般会使用盒子模型（也就是padding和margin）
点整盒子内容居中，一般使用margin
当该元素是弹性继承于父元素则可以使用padding
注：要避免改变元素的宽高（元素的宽高由border、padding和content决定，不包括margin）

还有一个常用于内容居中的属性：text-align
一般是用来设置文本水平对齐的（文本垂直对齐用line-height）
若元素除了文本还有行内元素或行内块元素，可以使元素内所有内容水平居中（line-height设置垂直对齐也是一样）
//常见使用场景：将元素内所有内容水平居中：使用text-align，前提保证子元素都是行内元素或行内块元素（是块级元素就使用display转换成可以设置宽高度的行内块元素）
注：line-height 和 text-align具有继承性

1）块级元素的居中----------------------------------------------------------
单个盒子水平居中对齐一般用 margin:0 auto;
既要水平居中又要垂直居中：margin: (父高的一半 - 子高的一半) auto 0;
(父高的一半 - 子高的一半)表示先移动父元素高度的一半，再移动子元素高度的一半
//margin或padding
4个值时：上、右、下、左
三个值时：上、 左右、 下
两个值时：上下、左右
一个值时：上下左右
2）行内块元素的居中--------------------------------------------------------
父元素line-height设置为父高（设置文本垂直居中）
行内块元素设置vertical-align为middle对齐文本中线，实现垂直居中
因为是行内块元素，父元素在设置text-align就可以实现水平居中了

3、一般子元素只需要按需设置某边的边框，大盒子设置border就好了

4、一系列相同的东西使用ul列表

5、overflow这个样式很重要，常用！

6、一般步骤：
布局是用div分好块，再用float一行显示，再使用盒子模型进行位置调整，再使用定位进行盒子压盒子
//尽量多分块，哪怕这里面只有一个元素，但是他也是代表一个部分

7、和文本相关的除了font还有text
text-indent: -1000px;/*移除文字不显示的方式*/
text-align     文本对齐
text-transform 英文大小写
text-decdecdecorationo:none 无装饰，通常对html下划线标签去掉下划线样式
text-:underline 下划线样式
text-:line-through 删除线样式-贯穿线样式
text-decoration:overline 上划线样式
......

8、/*

由总(整)到分(零)，再由分(零)到总(整)！！！
【也就是化整为零，各个击破】

前端的页面设计，结构性框架是首要的重点！
比如说，HTML结构上：
body分成part1和part2
那就先写part1，其中part1又分成part1.1和part1.2
那就先写part1.1，其中part1又分成part1.1.1和part1.1.2
那就先写part1.1.1的HTML，同时写对应的CSS
然后是part1.1.2
回到part1.2，同理那就先写part1.2.1然后是part1.2.2
直到把part1写完，再开始写part2
......
就是通过这样的方式，就不会一下就塞太多东西，可以化繁为简，化整为零，各个细节再慢慢各个击破！！！

注意:
1、CSS是对应着给HTML设置样式，所以结构必须严格对应着（代码编写时可以采取tab分成代码块的方式，拥有良好的代码规范习惯），这样你的思路才不会乱
2、CSS是对应HTML同时进行编写的，而不是分开的

HTML+CSS完成的页面是"死"的，要想变成"活"的就得靠javascript了

总结：
结构性框架不仅对于HTML和CSS是至关重要的，其实对于任何一种编程语言都是至关重要的
思考问题的方式就是得像这样有一种全局把控的思维
一个项目分成哪几个大的部分，然后一个部分一个部分地攻破，第一个部分又分成哪几个小部分，然后开始第一个小部分，第一个小部分又分成..........
    如：之前测试的脚本。
    先别急着动手糊里糊涂地瞎干，拿到一个项目时就明确目标和需求；
    明白之后就开始分析，做这件事要分成哪几个大步骤（1、准备数据进行输入，2、数据处理，3、数据输出进行展示或存储）
    然后先做第一个部分，做第一个部分又要分成哪几个步骤（1.1 1.2 1.3 .......）
    和HTML、CSS的思路是一样的
本质就是化繁为简，毕竟复杂的东西（大）都是由一个个简单的东西（小）累积起来的
今后你不管是拿到一个个大部分还是一个小部分，完成你自己的部分其实就是一个项目，你再把你的项目进行细分，由大到小，再由小到大！！！
整个过程就是由大到小，再分别完成各个小的部分，也就是是由小到大！！！


人与人的之间最大的区别是什么？
    就是思维！思考问题的方式不一样，好的思维方式会让你事半功倍，掌控全局
    对于编程而言这样结构框架性思维相当重要，其实也可以类比到生活中去！

其实编程的过程中也是可以总结很多生活成长的哲理的:
比如这个结构性框架思维用于演讲，用于学习
之前那个不断猜想，不断试验，不断否定，再不断猜想......最终得到真理，很生活中不断试错，不断碰壁，最终收获人生宝贵财富是一个道理
*/

9、jQuery找元素除了直接找还可以间接找
之所以两种有很多等价的地方 (比如：$("div").children("span") === $("div span"))
是因为本身选择器就带有间接找的特性
比如之前用到的
div:hover .arrow{
    display: block;
}
表示选中有鼠标悬停的div中的.arrow标签，让其显示
也就是先选中有鼠标选中的div，再间接找到里面.arrow
要不然实现有鼠标悬停，出现.arrow这种效果不好写，只能通过jQuery
$("div").mouseenter(function(){
    $(".class").show();
})
$("div").mouselwave(function(){
    $(".class").hide();
})
补充：伪类（如：:hover）还蛮有意思的
div .arrow 选中div中的.arrow
div:hover .arrow 选中有鼠标悬停的div中的.arrow
后代选择器或子代选择器的特点在于，先选的中父代，才能从父代中选子代（子代依赖于父代共存亡）

10、在一个普通的父元素中添加子元素不用考虑那么多，就跟在一个空白的body中开始添加元素是一样的，此时整个世界都是你的，不用考虑别的东西
也就是之前为什么叫你最好将元素都用div容器装起来，将结构尽量分析的详细和清晰的原因，
在父元素层面，只需要考虑其在它父元素中的布局（父元素终归也是其上一层的子元素）
在子元素层面，只需要考虑其在父元素中的布局
总结:
也就是对一个元素而言，只需要考虑其在其父元素中的布局即可，在布局的过程中只需要把目光放在其父元素和兄弟元素上就行了
至于父元素的兄弟元素和自己的子元素通通就不用考虑了!就和刚新建一个HTML时，在其中添加元素进行布局是一样的

